diff --git a/pom.xml b/pom.xml
index fc7a787..6100adc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7,7 +7,7 @@
     <parent>
         <groupId>io.confluent</groupId>
         <artifactId>common</artifactId>
-        <version>5.5.0-SNAPSHOT</version>
+        <version>5.3.2</version>
     </parent>
 
     <groupId>io.confluent</groupId>
diff --git a/src/main/java/io/confluent/connect/elasticsearch/DataConverter.java b/src/main/java/io/confluent/connect/elasticsearch/DataConverter.java
index 4fca70b..b863b54 100644
--- a/src/main/java/io/confluent/connect/elasticsearch/DataConverter.java
+++ b/src/main/java/io/confluent/connect/elasticsearch/DataConverter.java
@@ -113,7 +113,8 @@ public class DataConverter {
       String index,
       String type,
       boolean ignoreKey,
-      boolean ignoreSchema
+      boolean ignoreSchema,
+      boolean useEsGeneratedKey
   ) {
     if (record.value() == null) {
       switch (behaviorOnNullValues) {
@@ -174,7 +175,9 @@ public class DataConverter {
     }
 
     final String id;
-    if (ignoreKey) {
+    if (useEsGeneratedKey) {
+      id = null;
+    } else if (ignoreKey) {
       id = record.topic()
            + "+" + String.valueOf((int) record.kafkaPartition())
            + "+" + String.valueOf(record.kafkaOffset());
diff --git a/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchSinkConnectorConfig.java b/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchSinkConnectorConfig.java
index d582cee..0a6d428 100644
--- a/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchSinkConnectorConfig.java
+++ b/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchSinkConnectorConfig.java
@@ -98,6 +98,11 @@ public class ElasticsearchSinkConnectorConfig extends AbstractConfig {
   public static final String KEY_IGNORE_CONFIG = "key.ignore";
   public static final String TOPIC_KEY_IGNORE_CONFIG = "topic.key.ignore";
   public static final String SCHEMA_IGNORE_CONFIG = "schema.ignore";
+  public static final String USE_ELASTICSEARCH_GENERATED_KEY = "use.elasticsearch.id";
+  private static final String USE_ELASTICSEARCH_GENERATED_KEY_DOC =
+          "Whether to use Elasticsearch document ID."
+                  + USE_ELASTICSEARCH_GENERATED_KEY + "`` to override as ``true`` for specific "
+                  + "topics." ;
   public static final String TOPIC_SCHEMA_IGNORE_CONFIG = "topic.schema.ignore";
   public static final String DROP_INVALID_MESSAGE_CONFIG = "drop.invalid.message";
 
@@ -441,6 +446,16 @@ public class ElasticsearchSinkConnectorConfig extends AbstractConfig {
         ++order,
         Width.LONG,
         "Topics for 'Ignore Schema' mode"
+    ).define(
+        USE_ELASTICSEARCH_GENERATED_KEY,
+        Type.BOOLEAN,
+        false,
+        Importance.LOW,
+        USE_ELASTICSEARCH_GENERATED_KEY_DOC,
+        group,
+        ++order,
+        Width.LONG,
+            "Topics for 'Ignore Schema' mode"
     ).define(
         DROP_INVALID_MESSAGE_CONFIG,
         Type.BOOLEAN,
@@ -502,3 +517,4 @@ public class ElasticsearchSinkConnectorConfig extends AbstractConfig {
     System.out.println(CONFIG.toEnrichedRst());
   }
 }
+
diff --git a/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchSinkTask.java b/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchSinkTask.java
index 4858def..fff591c 100644
--- a/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchSinkTask.java
+++ b/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchSinkTask.java
@@ -93,6 +93,8 @@ public class ElasticsearchSinkTask extends SinkTask {
           config.getBoolean(ElasticsearchSinkConnectorConfig.DROP_INVALID_MESSAGE_CONFIG);
       boolean createIndicesAtStartTime =
           config.getBoolean(ElasticsearchSinkConnectorConfig.AUTO_CREATE_INDICES_AT_START_CONFIG);
+      boolean useEsGeneratedKey =
+          config.getBoolean(ElasticsearchSinkConnectorConfig.USE_ELASTICSEARCH_GENERATED_KEY);
 
       DataConverter.BehaviorOnNullValues behaviorOnNullValues =
           DataConverter.BehaviorOnNullValues.forValue(
@@ -126,6 +128,7 @@ public class ElasticsearchSinkTask extends SinkTask {
           .setType(type)
           .setIgnoreKey(ignoreKey, topicIgnoreKey)
           .setIgnoreSchema(ignoreSchema, topicIgnoreSchema)
+          .setUseEsGeneratedKey(useEsGeneratedKey)
           .setCompactMapEntries(useCompactMapEntries)
           .setTopicToIndexMap(topicToIndexMap)
           .setFlushTimoutMs(flushTimeoutMs)
diff --git a/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchWriter.java b/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchWriter.java
index 6a05f63..d75470e 100644
--- a/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchWriter.java
+++ b/src/main/java/io/confluent/connect/elasticsearch/ElasticsearchWriter.java
@@ -42,6 +42,7 @@ public class ElasticsearchWriter {
   private final boolean ignoreKey;
   private final Set<String> ignoreKeyTopics;
   private final boolean ignoreSchema;
+  private final boolean useEsGeneratedKey;
   private final Set<String> ignoreSchemaTopics;
   @Deprecated
   private final Map<String, String> topicToIndexMap;
@@ -61,6 +62,7 @@ public class ElasticsearchWriter {
       boolean ignoreKey,
       Set<String> ignoreKeyTopics,
       boolean ignoreSchema,
+      boolean useEsGeneratedKey,
       Set<String> ignoreSchemaTopics,
       Map<String, String> topicToIndexMap,
       long flushTimeoutMs,
@@ -80,6 +82,7 @@ public class ElasticsearchWriter {
     this.ignoreKeyTopics = ignoreKeyTopics;
     this.ignoreSchema = ignoreSchema;
     this.ignoreSchemaTopics = ignoreSchemaTopics;
+    this.useEsGeneratedKey = useEsGeneratedKey;
     this.topicToIndexMap = topicToIndexMap;
     this.flushTimeoutMs = flushTimeoutMs;
     this.dropInvalidMessage = dropInvalidMessage;
@@ -109,6 +112,7 @@ public class ElasticsearchWriter {
     private boolean ignoreKey = false;
     private Set<String> ignoreKeyTopics = Collections.emptySet();
     private boolean ignoreSchema = false;
+    private boolean useEsGeneratedKey = false;
     private Set<String> ignoreSchemaTopics = Collections.emptySet();
     private Map<String, String> topicToIndexMap = new HashMap<>();
     private long flushTimeoutMs;
@@ -143,6 +147,11 @@ public class ElasticsearchWriter {
       return this;
     }
 
+    public Builder setUseEsGeneratedKey(boolean useEsGeneratedKey) {
+      this.useEsGeneratedKey = useEsGeneratedKey;
+      return this;
+    }
+
     public Builder setCompactMapEntries(boolean useCompactMapEntries) {
       this.useCompactMapEntries = useCompactMapEntries;
       return this;
@@ -218,6 +227,7 @@ public class ElasticsearchWriter {
           ignoreKey,
           ignoreKeyTopics,
           ignoreSchema,
+          useEsGeneratedKey,
           ignoreSchemaTopics,
           topicToIndexMap,
           flushTimeoutMs,
@@ -256,6 +266,7 @@ public class ElasticsearchWriter {
       final boolean ignoreKey = ignoreKeyTopics.contains(sinkRecord.topic()) || this.ignoreKey;
       final boolean ignoreSchema =
           ignoreSchemaTopics.contains(sinkRecord.topic()) || this.ignoreSchema;
+      final boolean useEsGeneratedKey = this.useEsGeneratedKey;
 
       client.createIndices(Collections.singleton(index));
 
@@ -273,7 +284,7 @@ public class ElasticsearchWriter {
         existingMappings.add(index);
       }
 
-      tryWriteRecord(sinkRecord, index, ignoreKey, ignoreSchema);
+      tryWriteRecord(sinkRecord, index, ignoreKey, ignoreSchema, useEsGeneratedKey);
     }
   }
 
@@ -285,7 +296,8 @@ public class ElasticsearchWriter {
       SinkRecord sinkRecord,
       String index,
       boolean ignoreKey,
-      boolean ignoreSchema) {
+      boolean ignoreSchema,
+      boolean useEsGeneratedKey) {
 
     try {
       IndexableRecord record = converter.convertRecord(
@@ -293,7 +305,8 @@ public class ElasticsearchWriter {
           index,
           type,
           ignoreKey,
-          ignoreSchema);
+          ignoreSchema,
+          useEsGeneratedKey);
       if (record != null) {
         log.trace(
             "Adding record from topic/partition/offset {}/{}/{} to bulk processor",
diff --git a/src/test/java/io/confluent/connect/elasticsearch/DataConverterTest.java b/src/test/java/io/confluent/connect/elasticsearch/DataConverterTest.java
index 469eaa0..ecc41db 100644
--- a/src/test/java/io/confluent/connect/elasticsearch/DataConverterTest.java
+++ b/src/test/java/io/confluent/connect/elasticsearch/DataConverterTest.java
@@ -296,7 +296,7 @@ public class DataConverterTest {
     converter = new DataConverter(true, BehaviorOnNullValues.IGNORE);
 
     SinkRecord sinkRecord = createSinkRecordWithValue(null);
-    assertNull(converter.convertRecord(sinkRecord, index, type, false, false));
+    assertNull(converter.convertRecord(sinkRecord, index, type, false, false, false));
   }
 
   @Test
@@ -305,7 +305,7 @@ public class DataConverterTest {
 
     SinkRecord sinkRecord = createSinkRecordWithValue(null);
     IndexableRecord expectedRecord = createIndexableRecordWithPayload(null);
-    IndexableRecord actualRecord = converter.convertRecord(sinkRecord, index, type, false, false);
+    IndexableRecord actualRecord = converter.convertRecord(sinkRecord, index, type, false, false, false);
 
     assertEquals(expectedRecord, actualRecord);
   }
@@ -316,7 +316,7 @@ public class DataConverterTest {
     key = null;
 
     SinkRecord sinkRecord = createSinkRecordWithValue(null);
-    assertNull(converter.convertRecord(sinkRecord, index, type, false, false));
+    assertNull(converter.convertRecord(sinkRecord, index, type, false, false,false));
   }
 
   @Test
@@ -325,7 +325,7 @@ public class DataConverterTest {
 
     SinkRecord sinkRecord = createSinkRecordWithValue(null);
     try {
-      converter.convertRecord(sinkRecord, index, type, false, false);
+      converter.convertRecord(sinkRecord, index, type, false, false, false);
       fail("should fail on null-valued record with behaviorOnNullValues = FAIL");
     } catch (DataException e) {
       // expected
diff --git a/src/test/java/io/confluent/connect/elasticsearch/ElasticsearchSinkTestBase.java b/src/test/java/io/confluent/connect/elasticsearch/ElasticsearchSinkTestBase.java
index 536ef0b..85b8374 100644
--- a/src/test/java/io/confluent/connect/elasticsearch/ElasticsearchSinkTestBase.java
+++ b/src/test/java/io/confluent/connect/elasticsearch/ElasticsearchSinkTestBase.java
@@ -122,7 +122,7 @@ public class ElasticsearchSinkTestBase extends ESIntegTestCase {
 
     for (Object record : records) {
       if (record instanceof SinkRecord) {
-        IndexableRecord indexableRecord = converter.convertRecord((SinkRecord) record, index, TYPE, ignoreKey, ignoreSchema);
+        IndexableRecord indexableRecord = converter.convertRecord((SinkRecord) record, index, TYPE, ignoreKey, ignoreSchema, false);
         assertEquals(indexableRecord.payload, hits.get(indexableRecord.key.id));
       } else {
         assertEquals(record, hits.get("key"));
diff --git a/src/test/java/io/confluent/connect/elasticsearch/integration/ElasticsearchIntegrationTestBase.java b/src/test/java/io/confluent/connect/elasticsearch/integration/ElasticsearchIntegrationTestBase.java
index 47ceebc..d874e5e 100644
--- a/src/test/java/io/confluent/connect/elasticsearch/integration/ElasticsearchIntegrationTestBase.java
+++ b/src/test/java/io/confluent/connect/elasticsearch/integration/ElasticsearchIntegrationTestBase.java
@@ -144,7 +144,7 @@ public class ElasticsearchIntegrationTestBase {
 
     for (Object record : records) {
       if (record instanceof SinkRecord) {
-        IndexableRecord indexableRecord = converter.convertRecord((SinkRecord) record, index, TYPE, ignoreKey, ignoreSchema);
+        IndexableRecord indexableRecord = converter.convertRecord((SinkRecord) record, index, TYPE, ignoreKey, ignoreSchema, false);
         assertEquals(indexableRecord.payload, hits.get(indexableRecord.key.id));
       } else {
         assertEquals(record, hits.get("key"));
